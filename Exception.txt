=================Global Exception Handler=========================================
->Basically two main annoation use global exception handling 1. @ControllerAdvice, 2. @ExceptionHandler
->@ControllerAdvice is a specialization of the @Component annotation
->whole application in one global exception-handling component. It can act as an interceptor of exceptions that are thrown by methods.
->ResponseEntityExceptionHandler is a convenient base class for @ControllerAdvice classes that wish to provide 
   centralized exception handling across all @RequestMapping methods through the @ExceptionHandler methods of our application.
->@ExceptionHandler is an annotation that is used for handling exceptions in the specific handler classes or the handler methods. 

=====================================Exception Handling====================================================================
->An exception is an unwanted or unexpected event, which occur during the excution of a program.
       i.e At runtime that disturb the normal folw of the program.

->Exception Parent class Throwable, Throwable two types - 1. Exception and Error

->Exception two type ->1.CheckException(Comple time Exception) 2.Unchecked Exception (Runtime exception).

->Unchecked Exception:- Checked exceptions happen at compile time when the source code is transformed into an executable code.
 e.g :- Arthemetic exception, Null pointer exception, Indexoutofbound exception.
->CheckException :- Unchecked exceptions happen at runtime when the executable program starts running.
e.g:-ClassNotFound exception, SQL exception, FileNotFound exception.
==================================Throw and Throws ======================================================================
Throw :- .Java throw keyword is used throw an exception explicitly in the code, inside the function or the block of code.
         .Type of exception Using throw keyword, we can only propagate unchecked exception i.e.the checked exception cannot be propagated using throw only
         .The throw keyword is followed by an instance of Exception to be thrown.
         .throw is used within the method.
Throws :- .Java throws keyword is used in the method signature to declare an exception which might be thrown by the function while the execution of the code.
          .Using throws keyword, we can declare both checked and unchecked exceptions. However, the throws keyword can be used to propagate checked exceptions only.
          .The throws keyword is followed by class names of Exceptions to be thrown.
          .throws is used with the method signature.
===========================================When we will get a NullPointerException?=============================================
=> when a variable is access which is not pointing to any object and refers to nothing or null

=============================================when classnotfoundexception occurs=========================================================
=>when you try to load a class at runtime using Class. forName() or loadClass() methods and requested classes are not found in classpath
=>simple way when the JVM tries to load a particular class but does not find it in the classpath.

====================================================Custom Exception======================================================================
=>custom exception class that extends the Exception class
=>Using the custom exception, we can have your own exception and message. Here, we have passed a string to the constructor of superclass i.e. Exception class that can be obtained using getMessage() method on the object
// class representing custom exception  
class MyCustomException extends Exception  
{  
    
}  

// method to check the age  
    static void validate (int age) throws InvalidAgeException{    
       if(age < 18){  
  
        // throw an object of user defined exception  
        throw new InvalidAgeException("age is not valid to vote");    
    }  

Why use:- Custom exceptions provide you the flexibility to add attributes and methods that are not part of a standard Java exception. These can store additional information, like an application-specific error code, or provide utility methods that can be used to handle or present the exception to a user
=======================================================================================================
=>finally block is a block used to execute important code such as closing the connection.
   finally block is always executed whether an exception is handled or not

6.concurrent modification exception.
---------------------------------------
=> ConcurrentModificationException is a runtime exception that is thrown in Java when an operation is performed on a collection (e.g. a list, set, or map).
   Solution:- resolved by traversing the elements of the ArrayList using a traditional for loop instead of the enhanced for loop.
              Since the traditional for loop does not use an Iterator to traverse the elements of a Collection,
              it does not cause a ConcurrentModificationException











